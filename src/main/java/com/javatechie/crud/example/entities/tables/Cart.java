/*
 * This file is generated by jOOQ.
 */
package com.javatechie.crud.example.entities.tables;


import com.javatechie.crud.example.entities.Keys;
import com.javatechie.crud.example.entities.RestApi;
import com.javatechie.crud.example.entities.tables.records.CartRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cart extends TableImpl<CartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rest_api.cart</code>
     */
    public static final Cart CART = new Cart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CartRecord> getRecordType() {
        return CartRecord.class;
    }

    /**
     * The column <code>rest_api.cart.CartID</code>.
     */
    public final TableField<CartRecord, Integer> CARTID = createField(DSL.name("CartID"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>rest_api.cart.OrderDate</code>.
     */
    public final TableField<CartRecord, LocalDateTime> ORDERDATE = createField(DSL.name("OrderDate"), SQLDataType.LOCALDATETIME(6), this, "");

    private Cart(Name alias, Table<CartRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cart(Name alias, Table<CartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rest_api.cart</code> table reference
     */
    public Cart(String alias) {
        this(DSL.name(alias), CART);
    }

    /**
     * Create an aliased <code>rest_api.cart</code> table reference
     */
    public Cart(Name alias) {
        this(alias, CART);
    }

    /**
     * Create a <code>rest_api.cart</code> table reference
     */
    public Cart() {
        this(DSL.name("cart"), null);
    }

    public <O extends Record> Cart(Table<O> child, ForeignKey<O, CartRecord> key) {
        super(child, key, CART);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RestApi.REST_API;
    }

    @Override
    public Identity<CartRecord, Integer> getIdentity() {
        return (Identity<CartRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CartRecord> getPrimaryKey() {
        return Keys.KEY_CART_PRIMARY;
    }

    @Override
    public Cart as(String alias) {
        return new Cart(DSL.name(alias), this);
    }

    @Override
    public Cart as(Name alias) {
        return new Cart(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cart rename(String name) {
        return new Cart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cart rename(Name name) {
        return new Cart(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, LocalDateTime> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
