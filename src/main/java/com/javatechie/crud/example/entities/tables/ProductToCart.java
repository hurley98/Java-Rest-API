/*
 * This file is generated by jOOQ.
 */
package com.javatechie.crud.example.entities.tables;


import com.javatechie.crud.example.entities.Indexes;
import com.javatechie.crud.example.entities.Keys;
import com.javatechie.crud.example.entities.RestApi;
import com.javatechie.crud.example.entities.tables.records.ProductToCartRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductToCart extends TableImpl<ProductToCartRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>rest_api.product_to_cart</code>
     */
    public static final ProductToCart PRODUCT_TO_CART = new ProductToCart();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductToCartRecord> getRecordType() {
        return ProductToCartRecord.class;
    }

    /**
     * The column <code>rest_api.product_to_cart.CartID</code>.
     */
    public final TableField<ProductToCartRecord, Integer> CARTID = createField(DSL.name("CartID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rest_api.product_to_cart.ProductID</code>.
     */
    public final TableField<ProductToCartRecord, Integer> PRODUCTID = createField(DSL.name("ProductID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>rest_api.product_to_cart.ProductQuantity</code>.
     */
    public final TableField<ProductToCartRecord, Integer> PRODUCTQUANTITY = createField(DSL.name("ProductQuantity"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProductToCart(Name alias, Table<ProductToCartRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductToCart(Name alias, Table<ProductToCartRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>rest_api.product_to_cart</code> table reference
     */
    public ProductToCart(String alias) {
        this(DSL.name(alias), PRODUCT_TO_CART);
    }

    /**
     * Create an aliased <code>rest_api.product_to_cart</code> table reference
     */
    public ProductToCart(Name alias) {
        this(alias, PRODUCT_TO_CART);
    }

    /**
     * Create a <code>rest_api.product_to_cart</code> table reference
     */
    public ProductToCart() {
        this(DSL.name("product_to_cart"), null);
    }

    public <O extends Record> ProductToCart(Table<O> child, ForeignKey<O, ProductToCartRecord> key) {
        super(child, key, PRODUCT_TO_CART);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : RestApi.REST_API;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.PRODUCT_TO_CART_PRODUCTID_IDX);
    }

    @Override
    public UniqueKey<ProductToCartRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_TO_CART_PRIMARY;
    }

    @Override
    public List<ForeignKey<ProductToCartRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CARTID, Keys.PRODUCTID);
    }

    private transient Cart _cart;
    private transient Products _products;

    public Cart cart() {
        if (_cart == null)
            _cart = new Cart(this, Keys.CARTID);

        return _cart;
    }

    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.PRODUCTID);

        return _products;
    }

    @Override
    public ProductToCart as(String alias) {
        return new ProductToCart(DSL.name(alias), this);
    }

    @Override
    public ProductToCart as(Name alias) {
        return new ProductToCart(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductToCart rename(String name) {
        return new ProductToCart(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductToCart rename(Name name) {
        return new ProductToCart(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
