/*
 * This file is generated by jOOQ.
 */
package com.javatechie.crud.example.entities;


import com.javatechie.crud.example.entities.tables.Cart;
import com.javatechie.crud.example.entities.tables.ProductToCart;
import com.javatechie.crud.example.entities.tables.Products;
import com.javatechie.crud.example.entities.tables.records.CartRecord;
import com.javatechie.crud.example.entities.tables.records.ProductToCartRecord;
import com.javatechie.crud.example.entities.tables.records.ProductsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * rest_api.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<CartRecord> KEY_CART_PRIMARY = Internal.createUniqueKey(Cart.CART, DSL.name("KEY_cart_PRIMARY"), new TableField[] { Cart.CART.CARTID }, true);
    public static final UniqueKey<ProductToCartRecord> KEY_PRODUCT_TO_CART_PRIMARY = Internal.createUniqueKey(ProductToCart.PRODUCT_TO_CART, DSL.name("KEY_product_to_cart_PRIMARY"), new TableField[] { ProductToCart.PRODUCT_TO_CART.CARTID, ProductToCart.PRODUCT_TO_CART.PRODUCTID }, true);
    public static final UniqueKey<ProductsRecord> KEY_PRODUCTS_PRIMARY = Internal.createUniqueKey(Products.PRODUCTS, DSL.name("KEY_products_PRIMARY"), new TableField[] { Products.PRODUCTS.PRODUCTID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<ProductToCartRecord, CartRecord> CARTID = Internal.createForeignKey(ProductToCart.PRODUCT_TO_CART, DSL.name("CartID"), new TableField[] { ProductToCart.PRODUCT_TO_CART.CARTID }, Keys.KEY_CART_PRIMARY, new TableField[] { Cart.CART.CARTID }, true);
    public static final ForeignKey<ProductToCartRecord, ProductsRecord> PRODUCTID = Internal.createForeignKey(ProductToCart.PRODUCT_TO_CART, DSL.name("ProductID"), new TableField[] { ProductToCart.PRODUCT_TO_CART.PRODUCTID }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.PRODUCTID }, true);
}
